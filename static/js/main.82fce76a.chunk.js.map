{"version":3,"sources":["Components/Header/HeaderMenuItem.js","Components/Header/HeaderMenu.js","Components/Header/Header.js","Components/Footer/FooterMenuItem.js","Components/Footer/FooterMenu.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderMenuItem","props","href","item","url","onMouseLeave","n","title","console","log","HeaderMenu","MenuItems","map","el","key","Header","HeaderMenuItems","FooterMenuItem","className","FooterMenu","Footer","FooterMenuItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAiBeA,MAVX,SAAwBC,GAEpB,OACI,6BACI,uBAAGC,KAAMD,EAAME,KAAKC,IAAKC,aAAc,kBAR9BC,EAQiDL,EAAME,KAAKI,WAP7EC,QAAQC,IAAI,8BAAgCH,GAD5B,IAACA,IAQqEL,EAAME,KAAKI,SCA1FG,MAPf,SAAoBT,GAChB,OAAO,4BACFA,EAAMU,UAAUC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAgBC,IAAKD,EAAGN,MAAOJ,KAAMU,SCOzDE,MAVf,SAAgBd,GAEZ,OAAO,gCAASA,EAAMM,MAGlB,kBAAC,EAAD,CAAYI,UAAWV,EAAMe,oB,KCStBC,MAVf,SAAwBhB,GAEhB,OACJ,yBAAKiB,UAAU,UACX,uBAAGhB,KAAMD,EAAME,KAAKC,IAAKC,aAAc,kBAR1BC,EAQ6CL,EAAME,KAAKI,WAPzEC,QAAQC,IAAI,8BAAgCH,GAD5B,IAACA,IAQiEL,EAAME,KAAKI,MAAzF,OCCOY,MATf,SAAoBlB,GAEhB,OAAO,4BAEFA,EAAMU,UAAUC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAgBC,IAAKD,EAAGN,MAAOJ,KAAMU,SCMzDO,MATf,SAAgBnB,GAEZ,OAAO,gCAEH,kBAAC,EAAD,CAAYU,UAAWV,EAAMoB,oBC4BtBC,MA/Bf,WAgBI,OACI,yBAAKJ,UAAU,OACX,kBAAC,EAAD,CACIX,MAjBM,YAkBNS,gBAjBY,CACpB,CAACT,MAAO,OAAQH,IAAK,yCACrB,CAACG,MAAO,cAAeH,IAAK,yCAC5B,CAACG,MAAO,WAAYH,IAAK,yCACzB,CAACG,MAAO,QAASH,IAAK,4CAelB,qDAEA,kBAAC,EAAD,CACIiB,gBAhBY,CACpB,CAACd,MAAO,UAAWH,IAAK,yCACxB,CAACG,MAAO,uBAAwBH,IAAK,yCACrC,CAACG,MAAO,UAAWH,IAAK,yCACxB,CAACG,MAAO,UAAWH,IAAK,8CCNZmB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.82fce76a.chunk.js","sourcesContent":["import React from 'react';\n\n\n    const onMouseLeave= (n) => {\n        console.log('Please come back and click ' + n);\n    };\n\n    function HeaderMenuItem(props) {\n\n        return (\n            <div>\n                <a href={props.item.url} onMouseLeave={() => onMouseLeave(props.item.title)}>{props.item.title}</a>\n\n            </div>\n        );\n    }\n\nexport default HeaderMenuItem;\n","import React from 'react';\nimport HeaderMenuItem from \"./HeaderMenuItem\";\n\n\nfunction HeaderMenu(props) {\n    return <ul>\n        {props.MenuItems.map(el => <HeaderMenuItem key={el.title} item={el}/>)}\n    </ul>;\n\n}\n\nexport default HeaderMenu;","import React from 'react';\nimport HeaderMenu from './HeaderMenu';\n\nfunction Header(props) {\n\n    return <strong>{props.title}\n\n\n        <HeaderMenu MenuItems={props.HeaderMenuItems}/>\n\n    </strong>\n}\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css'\n\nconst onMouseLeave= (n) => {\n    console.log('Please come back and click ' + n);\n};\n\nfunction FooterMenuItem(props) {\n\n        return (\n    <div className=\"Footer\">\n        <a href={props.item.url} onMouseLeave={() => onMouseLeave(props.item.title)}>{props.item.title} </a>\n\n    </div>\n        );\n}\n\nexport default FooterMenuItem;\n","import React from 'react';\nimport FooterMenuItem from \"./FooterMenuItem\";\n\nfunction FooterMenu(props) {\n\n    return <ul>\n\n        {props.MenuItems.map(el => <FooterMenuItem key={el.title} item={el}/>)}\n\n    </ul>\n}\n\nexport default FooterMenu;\n\n\n","import React from 'react';\nimport './Footer.css';\nimport FooterMenu from './FooterMenu';\n\nfunction Footer(props) {\n\n    return <strong>\n\n        <FooterMenu MenuItems={props.FooterMenuItems}/>\n\n    </strong>\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css'\nimport Header from './Components/Header/Header';\nimport Footer from './Components/Footer/Footer';\n\nfunction App() {\n\n    const mainTitle = 'Car Parts';\n    const HeaderMenuItems = [\n        {title: 'Home', url: 'https://www.projecthomeworkpasv.com/1'},\n        {title: 'Order parts', url: 'https://www.projecthomeworkpasv.com/2'},\n        {title: 'Shipping', url: 'https://www.projecthomeworkpasv.com/3'},\n        {title: 'Deals', url: 'https://www.projecthomeworkpasv.com/4'},\n    ];\n    const FooterMenuItems = [\n        {title: 'Payment', url: 'https://www.projecthomeworkpasv.com/5'},\n        {title: 'COVID-19 information', url: 'https://www.projecthomeworkpasv.com/6'},\n        {title: 'Careers', url: 'https://www.projecthomeworkpasv.com/7'},\n        {title: 'Contact', url: 'https://www.projecthomeworkpasv.com/8'},\n    ];\n\n    return (\n        <div className=\"App\">\n            <Header\n                title={mainTitle}\n                HeaderMenuItems={HeaderMenuItems}\n            />\n            <h1>Car parts, covid free</h1>\n\n            <Footer\n                FooterMenuItems={FooterMenuItems}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}