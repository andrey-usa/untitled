{"version":3,"sources":["Header/HeaderMenuItem.js","Header/HeaderMenu.js","Header/Header.js","Footer/FooterMenuItem.js","Footer/FooterMenu.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderMenuItem","props","item","title","HeaderMenu","HeaderMenuItems","map","el","i","key","Header","FooterMenuItem","className","FooterMenu","FooterMenuItems","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPASeA,MAPf,SAAwBC,GAEpB,OAAO,4BACFA,EAAMC,KAAKC,QCILC,MANf,SAAoBH,GAChB,OAAO,4BACFA,EAAMI,gBAAgBC,KAAI,SAACC,EAAIC,GAAL,OAAW,kBAAC,EAAD,CAAgBC,IAAOD,EAAGN,KAAQK,SCSjEG,MAXf,SAAgBT,GAEZ,OAAO,gCAASA,EAAME,MAIlB,kBAAC,EAAD,CAAYE,gBAAiBJ,EAAMI,oB,KCD5BM,MAJf,SAAwBV,GACpB,OAAM,yBAAKW,UAAU,UAAUX,EAAMC,KAAKC,QCI/BU,MANf,SAAoBZ,GAChB,OAAO,4BACFA,EAAMa,gBAAgBR,KAAI,SAACC,EAAIC,GAAL,OAAW,kBAAC,EAAD,CAAgBC,IAAOD,EAAGN,KAAQK,SCQjEQ,MATf,SAAgBd,GAEZ,OAAO,gCAEH,kBAAC,EAAD,CAAYa,gBAAiBb,EAAMa,oBCmC5BE,MAtCf,WAoBI,OACI,yBAAKJ,UAAU,OACX,kBAAC,EAAD,CACIT,MArBM,YAsBNE,gBArBY,CAEpB,CAACF,MAAO,QACR,CAACA,MAAO,eACR,CAACA,MAAO,YACR,CAACA,MAAO,YAmBJ,qDAEA,kBAAC,EAAD,CAEIW,gBArBY,CAEpB,CAACX,MAAO,WACR,CAACA,MAAO,iBACR,CAACA,MAAO,WACR,CAACA,MAAO,gBCRIc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0044200b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction HeaderMenuItem(props) {\n\n    return <li>\n        {props.item.title}\n        </li>;\n}\n\nexport default HeaderMenuItem;\n","import React from 'react';\nimport HeaderMenuItem from \"./HeaderMenuItem\";\n\nfunction HeaderMenu(props) {\n    return <ul>\n        {props.HeaderMenuItems.map((el, i) => <HeaderMenuItem key = {i} item = {el} />)}\n    </ul>;\n}\n\nexport default HeaderMenu;","import React from 'react';\nimport HeaderMenu from './HeaderMenu';\n\nfunction Header(props) {\n\n    return <strong>{props.title}\n\n\n\n        <HeaderMenu HeaderMenuItems={props.HeaderMenuItems} />\n\n        </strong>\n}\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css'\n\n\nfunction FooterMenuItem(props) {\n    return<div className=\"Footer\">{props.item.title}</div>;\n}\n\nexport default FooterMenuItem;\n","import React from 'react';\nimport FooterMenuItem from \"./FooterMenuItem\";\n\nfunction FooterMenu(props) {\n    return <ul>\n        {props.FooterMenuItems.map((el, i) => <FooterMenuItem key = {i} item = {el} />)}\n    </ul>;\n}\n\nexport default FooterMenu;\n","import React from 'react';\nimport './Footer.css';\nimport FooterMenu from './FooterMenu';\n\nfunction Footer(props) {\n\n    return <strong>\n\n        <FooterMenu FooterMenuItems={props.FooterMenuItems} />\n\n        </strong>\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css'\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\n\nfunction App() {\n\n    const mainTitle = 'Car Parts';\n    const HeaderMenuItems = [\n\n        {title: 'Home'},\n        {title: 'Order parts'},\n        {title: 'Shipping'},\n        {title: 'Deals'},\n    ];\n    const FooterMenuItems = [\n\n        {title: 'Payment'},\n        {title: 'COVID-19 info'},\n        {title: 'Careers'},\n        {title: 'Contact'},\n\n\n    ];\n\n    return (\n        <div className=\"App\">\n            <Header\n                title={mainTitle}\n                HeaderMenuItems={HeaderMenuItems}\n\n            />\n            <h1>Car parts, covid free</h1>\n\n            <Footer\n\n                FooterMenuItems={FooterMenuItems}\n\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}